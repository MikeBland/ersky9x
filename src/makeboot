#
#       !!!! Do NOT edit this makefile with an editor which replace tabs by spaces !!!!    
#
##############################################################################################
# 
# On command line:
#
# make all = Create project
#
# make clean = Clean project files.
#
# To rebuild project do "make clean" and "make all".
#

##############################################################################################
# Start of default section
#

TRGT = arm-none-eabi-
CC   = $(TRGT)gcc
CP   = $(TRGT)objcopy
CLSS = $(TRGT)objdump
AS   = $(TRGT)as
#gcc -x assembler-with-cpp
BIN  = $(CP) -O ihex 
BINX = $(CP) -O binary 

# Object files directory
# Object files directory
ifeq ($(PCB), X9D)
 OBJDIR = x9dbootobj
else
 ifeq ($(REVX), 1)
  OBJDIR = skybootRobj
 else
  OBJDIR = skybootobj
 endif
endif

MCU  = cortex-m3

# List all default C defines here, like -D_DEBUG=1
DDEFS =

# List all default ASM defines here, like -D_DEBUG=1
DADEFS = 

# List all default directories to look for include files here
DINCDIR = 

# List the default directory to look for the libraries here
DLIBDIR =

# List all default libraries here
DLIBS = 

MEMORIES = sram

EXT = STD

#
# End of default section
##############################################################################################

##############################################################################################
# Start of user section
#

# 
# Define project name and Ram/Flash mode here
PROJECT        = bootloader

ifeq ($(PCB), X9D)
RUN_FROM_FLASH = 0
else
RUN_FROM_FLASH = 1
endif

#
# Define linker script file here
#
ifeq ($(RUN_FROM_FLASH), 1)
 ifeq ($(PCB), X9D)
  LDSCRIPT = x9d/stm32_flashBoot.ld
  FULL_PRJ = $(PROJECT)_flashT
 else
  ifeq ($(REVX), 1)
   LDSCRIPT = sam3s8c_boot.ld
   FULL_PRJ = $(PROJECT)_flash8
  else
   LDSCRIPT = sam3s4c_boot.ld
   FULL_PRJ = $(PROJECT)_flash4
  endif
 endif
# ifeq ($(SAM3S2), 1)
# LDSCRIPT = sam3s2c_ram.ld
# else
#   ifeq ($(PCB), X9D)
#     ARCH = ARM
#     LDSCRIPT = x9d/stm32_flash.ld
     TRGT = arm-none-eabi-
#     MCU  = cortex-m3
#     CPPDEFS += -DHSE_VALUE=12000000
#	  CPPDEFS += -DPCBX9D 
#   else
#     LDSCRIPT = sam3s4c_ram.ld
	  CPPDEFS += -DPCBSKY 
     UDEFS = -Dat91sam3s8
#	endif
# endif
else

 ifeq ($(PCB), X9D)
  ARCH = ARM
  LDSCRIPT = x9d/stm32_flashBoot.ld
  TRGT = arm-none-eabi-
  MCU  = cortex-m3
  CPPDEFS += -DHSE_VALUE=12000000
  CPPDEFS += -DPCBX9D 
  FULL_PRJ = $(PROJECT)_ramBoot
 endif
endif

# List all user C define here, like -D_DEBUG=1

# Define ASM defines here
UADEFS = 

ifeq ($(PCB), X9D)
SRC  = x9d/system_stm32f2xx.c \
       x9d/stm32f2xx_rcc.c \
       x9d/stm32f2xx_gpio.c \
       x9d/stm32f2xx_spi.c \
       x9d/misc.c \
       x9d/usb_core.c \
       x9d/usb_dcd.c \
       x9d/usb_dcd_int.c \
       x9d/usbd_core.c \
       x9d/usbd_ioreq.c \
       x9d/usbd_req.c \
       x9d/usbd_msc_data.c \
       x9d/usbd_msc_scsi.c \
       x9d/usbd_msc_bot.c \
       x9d/usbd_msc_core.c \
       x9d/usbd_desc.c \
       x9d/usb_bsp.c

CPPSRC = lcd.cpp \
         ff.cpp \
         x9d/aspi.cpp \
         x9d/diskio.cpp \
         x9d/lcd_driver.cpp \
       	x9d/i2c_ee.cpp \
         drivers.cpp \
         logicio.cpp \
			ff_lfn.cpp \
         x9d/usbd_usr.cpp \
         x9d/usbd_storage_msd.cpp \
         boot.cpp


# List ASM source files here
ASRC = x9d/startup_stm32f2xx.s

else

# List C source files here
SRC  = core_cm3.c \
       board_lowlevel.c \
       crt.c \
       usb/device/core/USBD_UDP.c usb/device/core/USBDDriver.c usb/device/core/USBDCallbacks.c \
       usb/device/massstorage/MSDDriver.c usb/device/massstorage/MSDDStateMachine.c usb/device/massstorage/MSDLun.c usb/device/massstorage/MSDDriverDescriptors.c usb/device/massstorage/SBCMethods.c \
       usb/common/core/USBEndpointDescriptor.c usb/common/core/USBGenericRequest.c usb/common/core/USBFeatureRequest.c usb/common/core/USBInterfaceRequest.c usb/common/core/USBGetDescriptorRequest.c \
       usb/common/core/USBSetAddressRequest.c usb/common/core/USBSetConfigurationRequest.c \
       usb/common/core/USBConfigurationDescriptor.c usb/common/core/USBGenericDescriptor.c \
       MEDSdcard.c \
       vectors_sam3s.c

CPPSRC = lcd.cpp \
         ff.cpp \
			diskio.cpp \
         drivers.cpp \
         logicio.cpp \
         sdcard_driver.cpp \
         massstorage.cpp \
         bootsamEeprom.cpp \
			ff_lfn.cpp \
         boot.cpp

# List ASM source files here
ASRC =

endif

# List all user directories here
UINCDIR = ./inc
# \
#          ./cmsis/core \
#          ./cmsis/device

# List the user directory to look for the libraries here
ULIBDIR =

# List all user libraries here
ULIBS = 

# Define optimisation level here
OPT = -Os

#
# End of user defines
##############################################################################################


INCDIR  = $(patsubst %,-I%,$(DINCDIR) $(UINCDIR))
LIBDIR  = $(patsubst %,-L%,$(DLIBDIR) $(ULIBDIR))

ifeq ($(RUN_FROM_FLASH), 0)
DEFS    = $(DDEFS) $(UDEFS) -DRUN_FROM_FLASH=0
else
DEFS    = $(DDEFS) $(UDEFS) -DRUN_FROM_FLASH=1
endif


ADEFS   = $(DADEFS) $(UADEFS)
OBJS    = $(ASRC:%.s=$(OBJDIR)/%.o) $(SRC:%.c=$(OBJDIR)/%.o) $(CPPSRC:%.cpp=$(OBJDIR)/%.o)
LIBS    = $(DLIBS) $(ULIBS)
MCFLAGS = -mcpu=$(MCU)

XOBJS = $(ASRC:%.s=x9bootdobj/%.o) $(SRC:%.c=x9dbootobj/%.o) $(CPPSRC:%.cpp=x9dbootobj/%.o)
ROBJS = $(ASRC:%.s=skybootRobj/%.o) $(SRC:%.c=skybootRobj/%.o) $(CPPSRC:%.cpp=skybootRobj/%.o)

#ASFLAGS = $(MCFLAGS) -g -gdwarf-2 -Wa,-amhls=$(<:.s=.lst) $(ADEFS)
CPFLAGS = $(MCFLAGS) $(OPT) -gdwarf-2 -mthumb -fomit-frame-pointer -Wall -Wstrict-prototypes -fverbose-asm -Wa,-ahlms=$(<:.c=.lst) $(DEFS)
LDFLAGS = $(MCFLAGS) -mthumb -nostartfiles -T$(LDSCRIPT) -Wl,-Map=$(FULL_PRJ).map,--cref,--no-warn-mismatch $(LIBDIR)
CPPFLAGS = $(MCFLAGS) $(OPT) -gdwarf-2 -mthumb -fomit-frame-pointer -Wall -fverbose-asm -Wa,-ahlms=$(<:.cpp=.lst) $(DEFS)

CPPFLAGS += $(CPPDEFS)
CPFLAGS += $(CPPDEFS)


# If REVX board
ifeq ($(REVX), 1)
 CPPDEFS += -DREVX
 EXT_MOD=REVB-X
endif

CPPDEFS += -DCPUARM

CPPDEFS += -DREVB

# If serial Debug required
ifeq ($(DEBUG), 1)
 CPPDEFS += -DDEBUG
endif

CPPDEFS += -DBOOT

# Generate dependency information
CPFLAGS += -MD -MP -MF .dep/$(@F).d
CPPFLAGS += -MD -MP -MF .dep/$(@F).d

#
# makefile rules
#

all: size_before $(OBJS) $(FULL_PRJ).elf $(FULL_PRJ).hex $(FULL_PRJ).lss $(FULL_PRJ).bin size

size_before:
#	arm-none-eabi-size $(FULL_PRJ).elf
	@if test -f $(FULL_PRJ).elf; then arm-none-eabi-size $(FULL_PRJ).elf; fi

size:
#	arm-none-eabi-size $(FULL_PRJ).elf
	@if test -f $(FULL_PRJ).elf; then arm-none-eabi-size $(FULL_PRJ).elf; fi

$(OBJDIR)/%.o : %.cpp
	$(CC) -c $(CPPFLAGS) -fno-exceptions -I . $(INCDIR) $< -o $@

$(OBJDIR)/%.o : %.c
	$(CC) -c $(CPFLAGS) -I . $(INCDIR) $< -o $@

$(OBJDIR)/%.o : %.s
	$(AS) -c $(ASFLAGS) $< -o $@

%elf: $(OBJS)
	$(CC) $(OBJS) $(LDFLAGS) $(LIBS) -o $@
  
# Create extended listing file from ELF output file.
%.lss: %.elf
	$(CLSS) -h -S $< > $@

%hex: %elf
	$(BIN) $< $@

%bin: %elf
	$(BINX) $< $@

clean:
	-rm -f $(OBJS)
	-rm -f $(ROBJS)
	-rm -f $(XOBJS)
	-rm -f $(FULL_PRJ).elf
	-rm -f $(FULL_PRJ).map
	-rm -f $(FULL_PRJ).hex
	-rm -f $(SRC:.c=.c.bak)
	-rm -f $(SRC:.c=.lst)
	-rm -f $(SRC:.c=.lss)
	-rm -f $(ASRC:.s=.s.bak)
	-rm -f $(ASRC:.s=.lst)
	-rm -fR .dep

# 
# Include the dependency files, should be the last of the makefile
#
-include $(shell mkdir .dep 2>/dev/null) $(wildcard .dep/*)

# *** EOF ***
